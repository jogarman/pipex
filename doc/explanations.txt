1. open: Esta función se utiliza para abrir un archivo o crear uno nuevo
   si no existe. Devuelve un descriptor de archivo que puede ser utilizado
   para realizar operaciones de lectura o escritura en el archivo.
   i.e file_descriptor = open("archivo.txt", O_RDWR);

2. close: Se utiliza para cerrar un descriptor de archivo que ha sido abierto
   previamente con la función open o creado por otras funciones relacionadas
   con el sistema de archivos.
   i.e file_descriptor = close("archivo.txt", O_RDWR);

3. read: Lee datos desde un descriptor de archivo abierto y los almacena en
   un buffer proporcionado por el usuario. Como WRITE pero de lectura
	ssize_t bytes_leidos = read(file_descriptor, buffer, BUFFER_SIZE);
	buffer -> la memoria donde se guarda
	BUFFER_SIZE -> por defceto 1024

4. write: Escribe datos desde un buffer proporcionado por el usuario en un
   descriptor de archivo abierto.

5. malloc: Reserva un bloque de memoria del tamaño especificado y devuelve un
   puntero a la primera posición de ese bloque.

6. free: Libera un bloque de memoria previamente asignado con malloc,
   calloc, o realloc.

7. perror: Imprime un mensaje de error asociado al valor de errno actual en
   la salida estándar de error.
   Para el final

8. strerror: Devuelve una cadena de caracteres que describe el error asociado
   a un valor de errno dado.
   Existe un diccionario de errores en cada sistema operativo
   printf("Error al abrir el archivo: %s\n", strerror(errno));

9. access: Verifica los permisos de acceso a un archivo especificado por la
   ruta proporcionada.

10. dup y dup2: Estas funciones se utilizan para duplicar un descriptor de archivo.
    dup crea una copia del descriptor de archivo con el número más bajo disponible,
    mientras que dup2 permite especificar el número de descriptor de archivo deseado.
		int duplicate_fd = dup(original_fd);
		int stdout_duplicate = dup2(original_fd, STDOUT_FILENO);

11. execve: Reemplaza el proceso actual con un nuevo programa. Es una de las
	funciones utilizadas para ejecutar programas en un sistema operativo basado en Unix.
	if (execve("./mi_programa", args, env) == -1)
		perror("execve");

12. exit: Termina la ejecución del programa actual y devuelve un estado
    de salida al sistema operativo.
	exit(0) -> salida normal
	exit(1) -> salida con codigo de error 1

*****
13. fork: Crea un nuevo proceso duplicando el proceso actual. Después de una llamada
    exitosa a fork, hay dos procesos en ejecución: el proceso padre y el proceso hijo.
*****
14. pipe: Crea un par de descriptores de archivo que están conectados entre sí,
    de modo que lo que se escribe en uno de ellos se puede leer desde el otro.

15. unlink: Elimina el enlace a un archivo, disminuyendo el contador de enlaces.
    Si el contador llega a cero, el archivo se elimina del sistema de archivos.
	Un sistema de archivos es una estructura que el sistema operativo utiliza para
	organizar y administrar los archivos. Unlink elimina el enlace a la memoria del disco

16. wait y waitpid: Estas funciones se utilizan para esperar a que un proceso hijo
    termine su ejecución. wait suspende la ejecución del proceso actual hasta que uno
    de sus hijos termine, mientras que waitpid espera a un proceso hijo específico
	o a cualquier hijo, dependiendo de los parámetros proporcionados.
	wait(&status)
	waitpid(pid, &status, 0);